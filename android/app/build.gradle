def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.synsoft.blogapp"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        config {
            keyAlias 'xx'
            keyPassword 'xxxx'
            storeFile file('demo.jks')
            storePassword 'demo@123'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true
//          debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

android.buildTypes.all { theBuildType ->
    android.productFlavors.all { theProductFlavor ->
        tasks.whenTaskAdded { theTask ->
            if (theTask.name == "merge${theProductFlavor.name.capitalize()}${theBuildType.name.capitalize()}Assets") {
                theTask.dependsOn ":flutter:copyFlutterAssets${theBuildType.name.capitalize()}"
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.google.firebase:firebase-firestore:21.1.1'
    api 'com.google.firebase:firebase-core:17.2.0'
    api 'com.google.firebase:firebase-auth:19.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.android.support:multidex:1.0.3'

}

apply plugin: 'com.google.gms.google-services'
